/*
    Simulation file for FIR filtering project
    -----------------------------------------
    Author: Jaroslav Ban      Supervisor: Milos Drutarovsky
            
    Department of Electronics and Multimedia Communications
                Technical University of Kosice

    Version: 1.05              Last revision: May 10 2006

    Revision history:
    1.05
        changed frequencies to 4 and 5 kHz
    1.04
        reversed inputs, outputs, coefs
    1.03
        added references to buf_size and ncoefs
    1.02    
        added routines for stack usage profiling
        reversed order of numbers output by save outputs
    1.01
        added routines to save data from memory to file
        added comments + header
    1.00
*/

DEFINE long local;

FUNC void count_states(void) {
  printf("%12d states, %14.10fs\n",states-local,((float)(states-local))/CLOCK);
  local = states;
}

FUNC void clear_stack(void) {   // write a value to empty stack below the  
  int idx; int pp;              //  stack pointer, so we can see how much of it
                                //  a routine will overwrite
  pp = R13;                     // stack pointer
  for(idx = 0; idx < 50; idx++) { // limit to 50*4 bytes
    pp -= 4;
    _WDWORD(pp, 0xdeadbeef);    // any improbable value
  }
}

FUNC void stack_used(void) {    // find out how much of stack was overwritten  
  int idx; int pp;              //  by a routine (assumes clear_stack was 
                                //  called before routine)
  pp = R13;                     // stack pointer
  for(idx = 0; idx < 50; idx++) {
    pp -= 4;
    if(_RDWORD(pp) == 0xdeadbeef) break; // find first occurrence
  }
  if(idx == 50) printf("Stack used: >200"); // change 50 to higher number
    else printf("Stack used: %d\n", 4*idx); 
}

FUNC void save_coefs(void) {    // saves coefficients to file   
  int idx;

  exec("log > coefs.log");
  for (idx = ncoefs - 1; idx >= 0; idx--) {
    printf ("%d\n", coeffs[idx]);
  }
  exec("log off");
}

FUNC void save_inputs(void) {   // generates inputs and saves them to file      
  int idx;

  exec("log > inputs.log");
  for (idx = 0; idx < buf_size; idx++) {
    inputs0[idx] = 2*rand(0) - 0x8000; // generate 1.15 value 
    printf ("%d\n", inputs0[idx]);
  }
  exec("log off");
}

FUNC void save_outputs(void) {  // saves outputs to file
  int idx;

  exec("log > outputs.log");
  for (idx = 0; idx < buf_size; idx++) {
    printf ("%d\n", outputs0[idx]);
  }
  exec("log off");
}

//
// Generate Sine Wave Signal on AD Channel 1
//
signal void AD01_Sine (void)  {
  float pi;
  float w1; float w2; float w3;
  float dt; 
  float tt;
  float val;

  pi = 3.1415926;       // an approximate value of pi 
  w1 = 2 * pi * 4000;   // frequencies of generated signals
  w2 = 2 * pi * 5000;  

  printf ("Sine Wave Signal on AD Channel 1.\n");
  
  dt = 0.000001;        // generate data every 1 uSecond
  tt = 0;               // initialize time to zero
  while(1) {
    tt = tt + dt;
    ad01 = 1.65 + 0.8 * __sin(w1 * tt) + 0.8 * __sin(w2 * tt);
                // the voltage range is 0 - 3.3
    twatch (CLOCK * dt);        // CLOCK = 60 000 000        
  }             // twatch suspends activity for a given number of CPU
}               //  cycles

AD01_Sine();    // start signal generation

DEFINE BUTTON "Clear stack", "clear_stack()"    // add buttons to toolbox
DEFINE BUTTON "Stack used", "stack_used()"
DEFINE BUTTON "Save coefs", "save_coefs()"
DEFINE BUTTON "Save inputs", "save_inputs()"
DEFINE BUTTON "Save outputs", "save_outputs()"
DEFINE BUTTON "States", "count_states()"
